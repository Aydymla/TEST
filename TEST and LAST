<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Отчеты инкассаторов</title>
  <script src="https://telegram.org/js/telegram-web-app.js"></script>
  <style>
    body {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
      margin: 0;
      font-family: Arial, sans-serif;
    }
    form {
      display: flex;
      flex-direction: column;
      margin-top: 10px;
    }
    label, select, input, textarea {
      margin: 5px;
      padding: 5px;
      font-size: 16px;
    }
    .submit-btn {
      margin-bottom: 20px;
    }
    .fuel-type-buttons {
      display: flex;
      gap: 10px;
    }
    .fuel-type-buttons button {
      padding: 10px 20px;
      font-size: 16px;
    }
    #photo {
      width: 200%;
    }
  </style>
  <script>
    document.addEventListener('DOMContentLoaded', async function() {
      if (!Telegram.WebApp) {
        console.error('Telegram.WebApp не найдено. Пожалуйста, запустите эту страницу в приложении Telegram.');
        // Дополнительные действия, если приложение не запущено в Telegram
      } else {
        Telegram.WebApp.ready();
        Telegram.WebApp.expand();
      }
      
      const form = document.getElementById('dataForm');
      form.addEventListener('submit', async e => {
        e.preventDefault();

        const formData = new FormData(form);
        
        try {
          const response = await fetch('https://script.google.com/macros/s/AKfycbx2tPDwMmJKAKGNI7n0QbkG8wAw4Wf2CQoL74uvZsyZkmWtK0y4zW2s7UpZpPBL8k0I/exec', {
            method: 'POST',
            body: formData
          });
          const data = await response.json();
          if (data.result === 'success') {
            alert('Данные успешно отправлены!');
            // Telegram.WebApp.close(); // Скрыть клавиатуру и закрыть WebApp
          } else {
            alert('При отправке данных произошла ошибка: ' + data.message);
          }
        } catch (error) {
          console.error('Ошибка!', error.message);
        }
      });

      // Скрытие клавиатуры при фокусе на невводимых полях (select и file input)
      const nonTextInputFields = form.querySelectorAll('select, input[type="file"]');
      nonTextInputFields.forEach(field => {
        field.addEventListener('focus', () => {
          Telegram.WebApp.close(); // Скрыть клавиатуру Telegram
        });
      });

      // Заполнение полей информацией о пользователе
      if (Telegram.WebApp.initData && Telegram.WebApp.initData.user) {
        document.getElementById('userId').value = Telegram.WebApp.initData.user.id || '';
        document.getElementById('userFirstName').value = Telegram.WebApp.initData.user.first_name || '';
        document.getElementById('userLastName').value = Telegram.WebApp.initData.user.last_name || '';
        document.getElementById('userUsername').value = Telegram.WebApp.initData.user.username || '';
      }

      // Fetching data for dropdowns
      try {
        const response = await fetch('https://script.google.com/macros/s/AKfycbx2tPDwMmJKAKGNI7n0QbkG8wAw4Wf2CQoL74uvZsyZkmWtK0y4zW2s7UpZpPBL8k0I/exec');
        const data = await response.json();

        const cashierSelect = document.getElementById('cashier');
        const carNumberSelect = document.getElementById('carNumber');
        const citySelect = document.getElementById('city');

        data.cashiers.forEach(cashier => {
          const option = document.createElement('option');
          option.value = cashier;
          option.text = cashier;
          cashierSelect.appendChild(option);
        });

        data.carNumbers.forEach(carNumber => {
          const option = document.createElement('option');
          option.value = carNumber;
          option.text = carNumber;
          carNumberSelect.appendChild(option);
        });

        data.cities.forEach(city => {
          const option = document.createElement('option');
          option.value = city;
          option.text = city;
          citySelect.appendChild(option);
        });
      } catch (error) {
        console.error('Ошибка при загрузке данных для выпадающих списков:', error.message);
      }
    });

    function selectFuelType(value) {
      document.querySelector('input[name="fuelType"]').value = value;
    }
  </script>
</head>
<body>
  <h1>Отчеты инкассаторов</h1>
  <form id="dataForm">
    <label for="userId">ID пользователя:</label>
    <input type="text" id="userId" name="userId" readonly>

    <label for="userFirstName">Имя пользователя:</label>
    <input type="text" id="userFirstName" name="userFirstName" readonly>

    <label for="userLastName">Фамилия пользователя:</label>
    <input type="text" id="userLastName" name="userLastName" readonly>

    <label for="userUsername">Юзернейм пользователя:</label>
    <input type="text" id="userUsername" name="userUsername" readonly>

    <label for="cashier">Инкассатор:</label>
    <select id="cashier" name="cashier" required></select>

    <label for="carNumber">Гос.номер:</label>
    <select id="carNumber" name="carNumber" required></select>

    <label for="coupons">Талоны:</label>
    <select id="coupons" name="coupons" required>
      <option value="ДА">ДА</option>
      <option value="НЕТ">НЕТ</option>
    </select>

    <label for="amountSpent">Потрачено (сумма):</label>
    <input type="number" id="amountSpent" name="amountSpent" required>

    <label for="fuelPurchased">Куплено топлива:</label>
    <input type="number" id="fuelPurchased" name="fuelPurchased" required>

    <label>Тип топлива:</label>
    <div class="fuel-type-buttons">
      <button type="button" id="benzine" name="fuelType" value="Бензин" onclick="selectFuelType(this.value)" required>Бензин</button>
      <button type="button" id="diesel" name="fuelType" value="Дизель" onclick="selectFuelType(this.value)" required>Дизель</button>
      <button type="button" id="gas" name="fuelType" value="Газ" onclick="selectFuelType(this.value)" required>Газ</button>
    </div>

    <label for="mileage">Пробег авто:</label>
    <input type="number" id="mileage" name="mileage" required>

    <label for="city">Город:</label>
    <select id="city" name="city" required></select>

    <label for="photo">Загрузить фотографию:</label>
    <input type="file" id="photo" name="photo" accept="image/*">

    <input class="submit-btn" type="submit" value="Отправить">
  </form>
</body>
</html>




OLD




<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Отчеты инкассаторов</title>
  <script src="https://telegram.org/js/telegram-web-app.js"></script>
  <style>
    body {
      background-color: black; /* Черный фон */
      color: white; /* Белый цвет текста */
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
      margin: 0;
      font-family: Arial, sans-serif;
    }
    form {
      display: flex;
      flex-direction: column;
      margin-top: 10px; /* Отступ сверху формы */
    }
    label, select, input, textarea {
      margin: 5px;
      padding: 5px;
      font-size: 16px;
    }
    .submit-btn {
      margin-bottom: 20px;
    }
    .fuel-type-buttons {
      display: flex;
      gap: 10px;
    }
    .fuel-type-buttons button {
      padding: 10px 20px; /* Увеличим отступы внутри кнопок для улучшения визуального восприятия */
      font-size: 16px; /* Увеличим размер текста в кнопках */
    }
    #photo {
      width: 200%; /* Увеличим размер кнопки Выбрать файл */
    }
  </style>
  <script>
    document.addEventListener('DOMContentLoaded', async function() {
      if (!Telegram.WebApp) {
        console.error('Telegram.WebApp не найдено. Пожалуйста, запустите эту страницу в приложении Telegram.');
        // Дополнительные действия, если приложение не запущено в Telegram
      } else {
        Telegram.WebApp.ready();
        Telegram.WebApp.expand();
      }
      
      const form = document.getElementById('dataForm');
      form.addEventListener('submit', async e => {
        e.preventDefault();

        const formData = new FormData(form);
        
        try {
          const response = await fetch('https://script.google.com/macros/s/AKfycbx2tPDwMmJKAKGNI7n0QbkG8wAw4Wf2CQoL74uvZsyZkmWtK0y4zW2s7UpZpPBL8k0I/exec', {
            method: 'POST',
            body: formData
          });
          const data = await response.json();
          if (data.result === 'success') {
            alert('Данные успешно отправлены!');
            // Telegram.WebApp.close(); // Скрыть клавиатуру и закрыть WebApp
          } else {
            alert('При отправке данных произошла ошибка: ' + data.message);
          }
        } catch (error) {
          console.error('Ошибка!', error.message);
        }
      });

      // Скрытие клавиатуры при фокусе на невводимых полях (select и file input)
      const nonTextInputFields = form.querySelectorAll('select, input[type="file"]');
      nonTextInputFields.forEach(field => {
        field.addEventListener('focus', () => {
          Telegram.WebApp.close(); // Скрыть клавиатуру Telegram
        });
      });

      // Fetching data for dropdowns
      try {
        const response = await fetch('https://script.google.com/macros/s/AKfycbx2tPDwMmJKAKGNI7n0QbkG8wAw4Wf2CQoL74uvZsyZkmWtK0y4zW2s7UpZpPBL8k0I/exec');
        const data = await response.json();

        const cashierSelect = document.getElementById('cashier');
        const carNumberSelect = document.getElementById('carNumber');
        const citySelect = document.getElementById('city');

        data.cashiers.forEach(cashier => {
          const option = document.createElement('option');
          option.value = cashier;
          option.text = cashier;
          cashierSelect.appendChild(option);
        });

        data.carNumbers.forEach(carNumber => {
          const option = document.createElement('option');
          option.value = carNumber;
          option.text = carNumber;
          carNumberSelect.appendChild(option);
        });

        data.cities.forEach(city => {
          const option = document.createElement('option');
          option.value = city;
          option.text = city;
          citySelect.appendChild(option);
        });
      } catch (error) {
        console.error('Ошибка при загрузке данных для выпадающих списков:', error.message);
      }
    });

    function selectFuelType(value) {
      // Set the selected value in the hidden input field
      document.querySelector('input[name="fuelType"]').value = value;
    }
  </script>
</head>
<body>
  <h1>Отчеты инкассаторов</h1>
  <form id="dataForm">
    <label for="cashier">Инкассатор:</label>
    <select id="cashier" name="cashier" required></select>

    <label for="carNumber">Гос.номер:</label>
    <select id="carNumber" name="carNumber" required></select>

    <label for="coupons">Талоны:</label>
    <select id="coupons" name="coupons" required>
      <option value="ДА">ДА</option>
      <option value="НЕТ">НЕТ</option>
    </select>

    <label for="amountSpent">Потрачено (сумма):</label>
    <input type="number" id="amountSpent" name="amountSpent" required>

    <label for="fuelPurchased">Куплено топлива:</label>
    <input type="number" id="fuelPurchased" name="fuelPurchased" required>

    <label>Тип топлива:</label>
    <div class="fuel-type-buttons">
      <button type="button" id="benzine" name="fuelType" value="Бензин" onclick="selectFuelType(this.value)" required>Бензин</button>
      <button type="button" id="diesel" name="fuelType" value="Дизель" onclick="selectFuelType(this.value)" required>Дизель</button>
      <button type="button" id="gas" name="fuelType" value="Газ" onclick="selectFuelType(this.value)" required>Газ</button>
    </div>

    <label for="mileage">Пробег авто:</label>
    <input type="number" id="mileage" name="mileage" required>

    <label for="city">Город:</label>
    <select id="city" name="city" required></select>

    <label for="photo">Загрузить фотографию:</label>
    <input type="file" id="photo" name="photo" accept="image/*">

    <input class="submit-btn" type="submit" value="Отправить">
  </form>
</body>
</html>
